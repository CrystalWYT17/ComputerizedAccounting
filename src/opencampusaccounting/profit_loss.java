/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package opencampusaccounting;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author user
 */
public class profit_loss extends javax.swing.JFrame {

    /**
     * Creates new form profit_loss
     */
    DefaultTableModel tbTableModel = new DefaultTableModel(new Object[]{"Item Name","purchase price","sale price","profit","loss"},0);
    String []month={"01","02","03","04","05","06","07","08","09","10","11","12"};
String mon;
    public profit_loss() {
        initComponents();
        jTable1.getTableHeader().setFont(new Font("SansSerif",Font.BOLD,15));
        jTable1.setRowHeight(40);
       // Object []dr;//={"Unicorn Cupcake","800","1000","200"};
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnReturn1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "JANUARY", "FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnReturn1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnReturn1.setText("Return Home");
        btnReturn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnReturn1)))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 845, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReturn1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
                String choice=jComboBox1.getSelectedItem().toString();
        //System.out.println(choice);
        switch(choice){
            case "JANUARY":mon=month[0];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
           // case "FEBRUARY":mon=month[1];break;
            case "FEBRUARY":
                tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();
                break;
            case "MARCH":mon=month[2];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "APRIL":mon=month[3];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "MAY":mon=month[4];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "JUNE":mon=month[5];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "JULY":mon=month[6];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "AUGUST":mon=month[7];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "SEPTEMBER":mon=month[8];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "OCTOBER":mon=month[9];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "NOVEMBER":mon=month[10];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
            case "DECEMBER":mon=month[11];tbTableModel.getDataVector().removeAllElements();
                jTable1.setModel(tbTableModel);
                databaseCAReport();break;
        }
        
//databaseCAReport();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btnReturn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturn1ActionPerformed
        Home H=new Home();
        Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
        H.setSize(d.width,d.height);
        dispose();
        H.setVisible(true);
    }//GEN-LAST:event_btnReturn1ActionPerformed
public void databaseCAReport(){
        String url = "jdbc:mysql://localhost:3306/computerizedaccounting";
			 String username = "root";
			 String password = "wuttyeetun";
			 
			 Connection conn;
			 Statement stmt;
			 ResultSet rs;
                         String item; int qty,price,sale,purchase,profit,loss;
			 
			 String st="";
                         String []items={"Unicorn Cupcake","Egg Tart","DIY and dcorate","Strawberry Yogurt","Berry Yogurt","Grape Yogurt",
                                        "Fruity Yogurt","Strawberry Ice_cream","Chocolate Ice_cream",
                                        "Vanila Ice_cream","Sushi","Key_Chain","UIT_Book"};
                        
                         
			 String query = "SELECT * FROM CUSTOMER WHERE DATE LIKE '____-%"+mon+"-__' AND QTY>0 AND PRICE>0";
                         //String query1="SELECT "
			// String query= "SELECT * FROM STUDENT WHERE stuaddress='Pathein'";
                       //String []shortcut={"U","E","D","S","B","G","F","I","C","V","J","K","T"};
                       jTable1.setModel(tbTableModel);
                        try{ 
				 Class.forName("com.mysql.jdbc.Driver"); //Register JDBC driver
				 conn = DriverManager.getConnection(url, username, password); //Open a connection
				 stmt = conn.createStatement();  //creates a Statement object for sending SQL statements to the database			 
			     rs = stmt.executeQuery(query);  //Execute a query
			     
			     while(rs.next()){   //Extract data from result set
			    	 
			    	 //String rno=rs.getString(1);
			    	 item=rs.getString(4);
			      	 qty=rs.getInt(6);
			      	 price=rs.getInt(7);
			      
                                 for(int i=0;i<items.length;i++){int total;
                                     if(item.equalsIgnoreCase(items[i])){//unicorn
                                         purchase=qty*700;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                         
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//egg
                                         purchase=qty*500;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//DIY
                                         purchase=qty*600;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//Straw Yo
                                         purchase=qty*900;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//Berry Yo
                                         purchase=qty*750;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//Grape Yo
                                         purchase=qty*750;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//fruity
                                         purchase=qty*900;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//straw ice cream
                                         purchase=qty*950;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//choco ice cream
                                         purchase=qty*800;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//valina ice cream
                                         purchase=qty*800;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//sushi
                                         purchase=qty*1000;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//key chain
                                         purchase=qty*600;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                     if(item.equalsIgnoreCase(items[i])){//UIT book
                                         purchase=qty*350;
                                         sale=price;
                                         if(purchase>sale){
                                             total=purchase-sale;
                                             Object []dr={items[i],purchase,sale,0,total};
                                             tbTableModel.addRow(dr);
                                         }
                                         else{
                                             total=sale-purchase;
                                             Object []dr={items[i],purchase,sale,total,0};
                                             tbTableModel.addRow(dr);
                                         }
                                     }
                                 }
                              
			     }		
			     //JOptionPane.showMessageDialog(this, "Student Information\n \n"+st, this.getTitle(),JOptionPane.INFORMATION_MESSAGE);
			     rs.close(); 
			     conn.close();
                             
                                
                        }
			 catch (ClassNotFoundException cnfe){
			      System.out.println("Driver could not be loaded: " + cnfe);
			 }
			 catch (SQLException sqle){
			      System.out.println("SQL Exception thrown: " + sqle);
			 }
        
			 
                         
			 
			 
			 
		}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(profit_loss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(profit_loss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(profit_loss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(profit_loss.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                profit_loss pl=new profit_loss();
                Dimension d=Toolkit.getDefaultToolkit().getScreenSize();
                pl.setSize(d.width,d.height);
                pl.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReturn1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
